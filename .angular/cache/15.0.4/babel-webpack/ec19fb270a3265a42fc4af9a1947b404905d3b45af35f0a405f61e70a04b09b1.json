{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nexport class AutenticacaoInterceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    if (this.tokenService.possuiToken()) {\n      const token = this.tokenService.retornaToken();\n      const headers = new HttpHeaders().append('x-access-token', token);\n      request = request.clone({\n        headers\n      });\n    }\n    return next.handle(request);\n  }\n}\nAutenticacaoInterceptor.ɵfac = function AutenticacaoInterceptor_Factory(t) {\n  return new (t || AutenticacaoInterceptor)(i0.ɵɵinject(i1.TokenService));\n};\nAutenticacaoInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AutenticacaoInterceptor,\n  factory: AutenticacaoInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAKEA,WAAW,QACN,sBAAsB;;;AAI7B,OAAM,MAAOC,uBAAuB;EAElCC,YACUC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EACnB;EAEHC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAGf,IAAI,IAAI,CAACH,YAAY,CAACI,WAAW,EAAE,EAAC;MAClC,MAAMC,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,YAAY,EAAE;MAC9C,MAAMC,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,MAAM,CAAC,gBAAgB,EAACH,KAAK,CAAC;MAChEH,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QAAEF;MAAO,CAAE,CAAC;;IAGtC,OAAOJ,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC/B;;AAlBWJ,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAa,SAAvBb,uBAAuB;AAAA","names":["HttpHeaders","AutenticacaoInterceptor","constructor","tokenService","intercept","request","next","possuiToken","token","retornaToken","headers","append","clone","handle","factory"],"sourceRoot":"","sources":["/home/ana/Documentos/okp/gatBook/BookG/src/app/autenticacao/autenticacao.interceptor.ts"],"sourcesContent":["import { TokenService } from './token.service';\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AutenticacaoInterceptor implements HttpInterceptor {\n\n  constructor(\n    private tokenService: TokenService\n  ) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n    ): Observable<HttpEvent<unknown>> {\n\n      if (this.tokenService.possuiToken()){\n        const token = this.tokenService.retornaToken();\n        const headers = new HttpHeaders().append('x-access-token',token);\n        request = request.clone({ headers });\n      }\n\n      return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}